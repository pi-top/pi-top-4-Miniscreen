import sys
import zmq
from ptcommon.ptdm_message import Message
from argparse import ArgumentParser

args = None
zmq_socket = None


def main():
    # try:
    #     parse_args()
    #     connect_to_socket()
    #     if args.up:
    #         signal = Message.PUB_V3_BUTTON_UP_PRESSED
    #     elif args.down:
    #         signal = Message.PUB_V3_BUTTON_DOWN_PRESSED
    #     elif args.select:
    #         signal = Message.PUB_V3_BUTTON_SELECT_PRESSED
    #     elif args.cancel:
    #         signal = Message.PUB_V3_BUTTON_CANCEL_PRESSED
    #     else:
    #         raise Exception("No button press event selected")
    #
    #     emit_button_press_event(signal)
    parse_args()
    connect_to_socket()
    if args.up:
        signal = Message.PUB_V3_BUTTON_UP_PRESSED
    elif args.down:
        signal = Message.PUB_V3_BUTTON_DOWN_PRESSED
    elif args.select:
        signal = Message.PUB_V3_BUTTON_SELECT_PRESSED
    elif args.cancel:
        signal = Message.PUB_V3_BUTTON_CANCEL_PRESSED
    else:
        raise Exception("No button press event selected")

    emit_button_press_event(signal)

    # except Exception as e:
    #     print("Error sending button press event: " + str(e))

    # finally:
    #     cleanup()
    cleanup()


def parse_args():
    global args

    parser = ArgumentParser(description='Emulate button pressed from device manager for sys menu.')
    parser.add_argument("-u", "--up", help="Emulate up press", action="store_true")
    parser.add_argument("-d", "--down", help="Emulate down press", action="store_true")
    parser.add_argument("-s", "--select", help="Emulate select press", action="store_true")
    parser.add_argument("-c", "--cancel", help="Emulate cancel press", action="store_true")

    args = parser.parse_args()


def connect_to_socket():
    global zmq_socket

    zmq_context_send = zmq.Context()
    zmq_socket = zmq_context_send.socket(zmq.REQ)
    zmq_socket.sndtimeo = 1000
    zmq_socket.rcvtimeo = 1000
    zmq_socket.connect("tcp://127.0.0.1:3781")


def emit_button_press_event(signal):
    message = Message.from_parts(signal, [])
    zmq_socket.send_string(message.to_string())

    response_string = zmq_socket.recv_string()
    return Message.from_string(response_string)


def cleanup():
    if zmq_socket is not None:
        zmq_socket.close(0)


if __name__ == "__main__":
    main()
