#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import atexit
from argparse import ArgumentParser
from logging import (
    getLogger,
    ERROR
)
from luma.core.error import DeviceNotFoundError
from os import path
from pathlib import Path
from signal import (
    signal,
    SIGINT,
    SIGTERM
)
from sys import exit
from time import sleep

from pitopcommon.logger import PTLogger
from pitopcommon.command_runner import run_command
from pitopcommon.common_names import DeviceName
from pitopcommon.ptdm import (
    PTDMRequestClient,
    PTDMSubscribeClient,
    Message,
)

from pitop.system.device import device_type
from pitop.miniscreen.oled import OLED

from components.widgets.common.functions import get_image_file
from components.MenuManager import MenuManager


# TODO: replace with check of file system size; remove patch from preinst
fs_expanded_breadcrumb = "/etc/pi-top/.expandedFs"
boot_animation_played_breadcrumb = "/tmp/.pt-sys-oled.boot-played"

exit_code = 0
ptdm_subscribe_client = None
app = None


def get_oled_spi_port():
    message = Message.from_parts(Message.REQ_GET_OLED_SPI_IN_USE, [])

    with PTDMRequestClient() as request_client:
        response = request_client.send_message(message)

    return int(response.parameters()[0])


spi_port_to_use = get_oled_spi_port()


def setup_subscribe_client():
    global ptdm_subscribe_client
    if ptdm_subscribe_client is not None:
        return
    ptdm_subscribe_client = PTDMSubscribeClient()

    def on_oled_spi_port_changed(parameters):
        ptdm_subscribe_client.invoke_callback_func_if_exists(
            stop_app, parameters())

    ptdm_subscribe_client.initialise({
        Message.PUB_OLED_SPI_BUS_CHANGED: on_oled_spi_port_changed,
    })
    ptdm_subscribe_client.start_listening()
    atexit.register(clean_up)


def clean_up():
    try:
        global ptdm_subscribe_client
        ptdm_subscribe_client.stop_listening()
    except Exception:
        pass


def configure_interrupt_signals(app):
    def signal_handler(signal, frame):
        app.stop()
    signal(SIGINT, signal_handler)
    signal(SIGTERM, signal_handler)


def should_run():
    try:
        return device_type() == DeviceName.pi_top_4.value
    except Exception:
        PTLogger.info(
            "Could not determine pi-top hub type from pt-device-manager. Exiting...")
        exit(1)

    PTLogger.info("Not running on a pi-top [4]. Exiting...")
    return False


def enable_spi_dtoverlay_if_required():
    global spi_port_to_use
    PTLogger.info(f"Will use SPI port {spi_port_to_use}")
    if not path.exists(f"/dev/spidev{spi_port_to_use}.0"):
        PTLogger.info(
            f"Overlay not loaded, running 'dtoverlay spi{spi_port_to_use}-1cs'")
        run_command(f"dtoverlay spi{spi_port_to_use}-1cs", timeout=5)
        sleep(1)


def get_parser():
    parser = ArgumentParser(description="pi-top OLED sys menu")
    parser.add_argument(
        "--log-level",
        type=int,
        help="set the logging level from 10 (more verbose) to 50 (less verbose)",
        default=20,
    )
    return parser


def stop_app(new_spi_port):
    PTLogger.info(
        f"SPI port used by OLED changed to {new_spi_port}... restarting app")
    global app
    if app:
        app.stop()

    global exit_code
    # to restart the systemd service
    exit_code = 1


def main():
    try:
        args = get_parser().parse_args()

        # Ignore PIL debug messages
        getLogger('PIL').setLevel(ERROR)
        PTLogger.setup_logging(logger_name="pt-sys-oled",
                               logging_level=args.log_level,
                               log_to_journal=False)

        if should_run():
            enable_spi_dtoverlay_if_required()
            setup_subscribe_client()

            device_found = False
            try:
                oled = OLED()
                device_found = True
            except DeviceNotFoundError as e:
                PTLogger.error(f"Error getting device: {str(e)}")

            # If device is not found, exit normally to avoid restarting the service repeatedly
            if not device_found:
                return

            oled._set_exclusive_mode(False)
            oled.reset()

            already_played_boot_animation = path.exists(
                boot_animation_played_breadcrumb)
            one_loop_only = path.exists(fs_expanded_breadcrumb)
            if not already_played_boot_animation:
                PTLogger.info("Not played boot animation this session")
                PTLogger.info("Starting startup animation")

                while True:
                    oled.play_animated_image_file(
                        get_image_file("startup/pi-top_startup.gif"),
                        background=False,
                        loop=False,
                    )
                    if one_loop_only:
                        Path(boot_animation_played_breadcrumb).touch()
                        break

                PTLogger.info("Finished startup animation")

            PTLogger.info("Setting up application")

            global app
            app = MenuManager(oled)
            configure_interrupt_signals(app)
            PTLogger.info("Starting application")
            app.main_loop()
            app.stop()

    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    main()
    exit(exit_code)
