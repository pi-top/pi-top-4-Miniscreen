#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from signal import (
    signal,
    SIGINT,
    SIGTERM
)
from logging import (
    basicConfig,
    getLogger,
    DEBUG,
    ERROR
)
from argparse import ArgumentParser
from luma.core.error import DeviceNotFoundError
from os import path
from time import sleep
from PIL import Image
from pathlib import Path

from pitop.utils.pt_os import is_pi_top_os
from pitop.utils.sys_info import is_pi
from pitop.utils.logger import PTLogger
from pitop.utils.command_runner import run_command
from pitop.utils.common_names import DeviceName
from pitop.miniscreen.oled import PTOLEDDisplay, get_device_instance

from components.widgets.common.functions import get_image_file

# TODO: replace with check of file system size; remove patch from preinst
fs_expanded_breadcrumb = "/etc/pi-top/.expandedFs"
boot_animation_played_breadcrumb = "/tmp/.pt-sys-oled.boot-played"


def configure_logging():
    basicConfig(
        level=DEBUG,
        format='%(asctime)-15s - %(message)s'
    )
    # Ignore PIL debug messages
    getLogger('PIL').setLevel(ERROR)


def configure_interrupt_signals():
    def signal_handler(signal, frame):
        PTLogger.debug("Stopping...")
        app.stop()
        PTLogger.debug("Stopped!")
    signal(SIGINT, signal_handler)
    signal(SIGTERM, signal_handler)


def should_run():

    if is_pi():
        try:
            host_device = run_command("pt-host", timeout=5).strip()
        except Exception as e:
            PTLogger.info(
                "Could not determine host device type from pt-device-manager. Exiting...")
            return False

        if host_device == DeviceName.pi_top_4.value:
            return True

        PTLogger.info("Not running on a pi-top [4]. Exiting...")
        return False
    else:
        PTLogger.info("Not running on a pi. Running in debug mode...")
        return True


def setup():
    configure_logging()
    configure_interrupt_signals()


def enable_sp1_dtoverlay_if_required():
    if not path.exists("/dev/spidev1.0"):
        run_command("dtoverlay spi1-1cs", timeout=5)
        sleep(1)


def play_boot_animation(oled_device):
    PTLogger.info("Playing boot animation...")
    img_path = get_image_file("startup/pi-top_startup.gif")
    image = Image.open(img_path)
    frame_no = 0

    fs_breadcrumb_exists = path.exists(fs_expanded_breadcrumb)
    one_loop_only = not is_pi_top_os() or fs_breadcrumb_exists

    while True:
        # Get current frame
        image.seek(frame_no)

        # Set black background
        background = Image.new(
            "RGB",
            oled_device.size,
            "black"
        )

        # Paste image onto background
        background.paste(
            image.resize(oled_device.size)
        )

        # Render
        oled_device.display(
            background.convert(oled_device.mode)
        )

        # Get frame length
        embedded_frame_speed_s = float(image.info["duration"] / 1000)

        # Wait for frame length
        sleep(embedded_frame_speed_s)

        if frame_no == image.n_frames - 1:
            # Completed one pass
            if one_loop_only:
                Path(boot_animation_played_breadcrumb).touch()
                break
            frame_no = 0
        else:
            frame_no = frame_no + 1


if __name__ == "__main__":
    try:
        setup()
        parser = ArgumentParser(description="pi-top OLED sys menu")
        parser.add_argument(
            "--emulator", help="run in on-screen emulator, not to OLED", action="store_true"
        )
        parser.add_argument(
            "--no-journal", help="output to stdout not the journal", action="store_true"
        )
        parser.add_argument(
            "--log-level",
            type=int,
            help="set the logging level from 10 (more verbose) to 50 (less verbose)",
            default=20,
        )
        args = parser.parse_args()

        PTLogger.setup_logging(logger_name="pt-sys-oled",
                               logging_level=args.log_level, log_to_journal=args.no_journal is False)

        if should_run():
            enable_sp1_dtoverlay_if_required()

            # By getting the device at this early stage, we make sure the instance we get
            # for the sys-oled is non-exclusive. That is, we don't want to block other
            # OLED applications from using the device. When another application does lock
            # the device, then the sys-oled should detect that and stop rendering.
            device_found = True
            try:
                _device = get_device_instance(
                    emulator=args.emulator, exclusive=False)
            except DeviceNotFoundError as e:
                device_found = False
                PTLogger.error(f"Error getting device: {str(e)}")

            # If device is not found, exit normally to avoid restarting the service repeatedly
            if device_found:
                from pitop.miniscreen.oled import PTOLEDDisplay
                from components.MenuManager import MenuManager

                oled = PTOLEDDisplay()
                oled.reset()

                played_boot_animation = path.exists(
                    boot_animation_played_breadcrumb)
                if not played_boot_animation:
                    play_boot_animation(_device)

                app = MenuManager()
                app.main_loop()
                app.stop()

    except KeyboardInterrupt:
        pass
