#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from ptcommon.sys_info import is_pi
from ptcommon.logger import PTLogger
from subprocess import getstatusoutput
from ptoled import get_device_instance

from signal import (
    signal,
    SIGINT,
    SIGTERM
)
from logging import (
    basicConfig,
    getLogger,
    DEBUG,
    ERROR
)
from argparse import ArgumentParser


def configure_logging():
    basicConfig(
        level=DEBUG,
        format='%(asctime)-15s - %(message)s'
    )
    # Ignore PIL debug messages
    getLogger('PIL').setLevel(ERROR)


def configure_interrupt_signals():
    def signal_handler(signal, frame):
        PTLogger.debug("Stopping...")
        app.stop()
        PTLogger.debug("Stopped!")
    signal(SIGINT, signal_handler)
    signal(SIGTERM, signal_handler)


def should_run():

    if is_pi():
        status, command_output = getstatusoutput("pt-host")
        if status != 0:
            PTLogger.info(
                "Could not determine host device type from pt-device-manager. Exiting...")
        elif "pi-top [4]" in command_output:
            return True
        else:
            PTLogger.info("Not running on a pi-top [4]. Exiting...")
        return False

    else:
        PTLogger.info("Not running on a pi. Running in debug mode...")
        return True


def setup():
    configure_logging()
    configure_interrupt_signals()


if __name__ == "__main__":
    try:
        setup()
        parser = ArgumentParser(description="pi-top OLED sys menu")
        parser.add_argument(
            "--emulator", help="run in on-screen emulator, not to OLED", action="store_true"
        )
        parser.add_argument(
            "--no-journal", help="output to stdout not the journal", action="store_true"
        )
        parser.add_argument(
            "--log-level",
            type=int,
            help="set the logging level from 10 (more verbose) to 50 (less verbose)",
            default=20,
        )
        args = parser.parse_args()

        PTLogger.setup_logging("pt-sys-oled", args.log_level,
                               args.no_journal is False)

        if should_run():
            # By getting the device at this early stage, we make sure the instance we get
            # for the sys-oled is non-exclusive. That is, we don't want to block other
            # OLED applications from using the device. When another application does lock
            # the device, then the sys-oled should detect that and stop rendering.
            _device = get_device_instance(
                emulator=args.emulator, exclusive=False)

            from ptoled import PTOLEDDisplay
            from components.MenuManager import MenuManager

            ptoled = PTOLEDDisplay()
            ptoled.reset()
            app = MenuManager()
            app.main_loop()
            app.stop()

    except KeyboardInterrupt:
        pass
